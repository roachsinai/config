[core]
	autocrlf = false
	quotepath = false
	hooksPath = ~/.config/git/hooks
[user]
	name = thinca
	email = thinca@gmail.com
[github]
	user = thinca
[color]
	ui = auto
[pull]
	rebase = true
[push]
	default = current
	followTags = true
[fetch]
	prune = true
[remote]
	pushDefault = origin
[rebase]
	autoStash = true
	autoSquash = true
	instructionFormat = [%ai] %s
[diff]
	algorithm = histogram
	compactionHeuristic = true
[grep]
	lineNumber = true
[commit]
	verbose = true
[pager]
	log = (type diff-highlight &>/dev/null && diff-highlight || cat) | less
	show = (type diff-highlight &>/dev/null && diff-highlight || cat) | less
	diff = (type diff-highlight &>/dev/null && diff-highlight || cat) | less
[interactive]
	diffFilter = (type diff-highlight &>/dev/null && diff-highlight || cat)
[alias]
	h = help
	a = add --update
	aa = add -A
	cl = clone
	b = branch
	ba = branch -a
	br = branch -r
	reword = commit --amend
	ci = commit
	cia = commit -a
	cim = commit --amend -C HEAD
	cin = !git commit --amend --all -C HEAD \"--date=$(date --rfc-2822)\"
	tm = "!f() { \
		export GIT_COMMITTER_DATE=\"$(date --date=\"$(git log -1 --format=%aD HEAD) ${1:-0} hours ago\" --rfc-2822)\"; \
		git commit --amend -C HEAD --date=\"${GIT_COMMITTER_DATE}\"; \
	}; f"
	rbtm = "!f() { \
		git -c core.editor=true rebase ${2:-master} -i --exec \"git tm ${1:-0}\"; \
	}; f"
	rbd = rebase --committer-date-is-author-date
	rbn = rebase --ignore-date
	base-commit = !git merge-base origin/$(git base-branch) HEAD
	select-commit = "!f() { \
		git log --oneline ${1} | \
			fzf --preview='git show --color {1}' | \
			cut -b 1-7; \
	}; f"
	fixcommit = "!f() { \
		git commit --fixup=\"$(\
			git select-commit \"${1:-$(git base-commit)}..HEAD\"\
		)\"; \
	}; f"
	fixup = !git -c core.editor=true rebase -i --autosquash $(git base-commit)
	fix = "!f() { \
		git fixcommit ${1} && \
		git fixup; \
	}; f"
	co = checkout
	cob = "!f() { \
		b=$(git current-branch) && \
		git checkout -b \"${1}\" && \
		git base-branch \"${b}\"; \
	}; f"
	topic = !git checkout "$(git current-remote)/master" -b
	d = diff HEAD
	di = diff
	dl = diff HEAD^
	ds = diff --cached
	f = fetch
	r = remote
	l = log
	lp = log -p
	l1 = log --pretty=oneline
	newly  = !git log $(git prev-commit)..HEAD --reverse -C
	newlyp = !git newly -p
	prev-commit = !git reflog show --format=%H | uniq | head -n 2 | tail -n 1
	fl = !git log $(git base-commit)..HEAD --reverse
	flp = !git log $(git base-commit)..HEAD --reverse -p
	m = merge --no-ff --no-edit
	s = show
	ss = show --stat
	st = status --short --branch
	t = tag
	sh = stash save --include-untracked
	sp = stash pop
	stl = stash list
	sts = stash show
	stsv = stash show -p
	cancel = !git commit --all --message='Temporary commit for cancel' && git reset --hard HEAD~
	return = reset HEAD~
	rollback = reset --hard HEAD~
	chp = cherry-pick
	rb = rebase
	rbu = !git rebase "$(git base-full)"
	rbui = !git rebase -i "$(git base-full)"
	move-base = "!f() { \
		[[ -n $1 ]] && \
		git rebase --onto $1 $(git base-full) && \
		git base-branch $1; \
	}; f"
	rbi = rebase -i
	rbc = rebase --continue
	rba = rebase --abort
	df = !git diff "$(git base-commit)..HEAD"
	bf = !git diff --name-only "$(git base-commit)..HEAD"
	conflicts = diff --name-only --diff-filter=U
	upst = rebase origin/master
	gene = log --graph --date=iso --pretty=gene
	genea = log --graph --date=iso --pretty=gene --all
	gr = log --graph --date=iso --pretty=genegr
	hist = log -p --reverse --stat --color-words -C
	recent = log --date=relative --pretty=recent --reverse -10
	ranking = shortlog -s -n --no-merges
	wip = commit -a -m '[WIP]'
	pl = pull
	ph = push
	dci = svn dcommit
	sci = svn dcommit
	sup = svn rebase
	ignore = update-index --assume-unchanged
	unignore = update-index --no-assume-unchanged
	ignored = !git ls-files -v | grep "^[a-z]"
	pr = "!f() { \
		git fetch --update-head-ok ${2:-origin} pull/$1/head:pr-$1; \
	}; f"
	sb = !git sweep-branch
	sweep-branch = "!f() { \
		b=$(git spent-branches); \
		[[ -z \"$b\" ]] || git branch --delete $b; \
	}; f"
	merged-branches = for-each-ref refs/heads/ --format='%(refname:short)' --merged
	spent-branches = "!f() { \
		git merged-branches ${1} | \
			grep -Ev \"^${1}\\$|$(git worktree-bases | sed 's/.*/^&$/' | paste -s -d'|' -)\"; \
	}; f ${1:-$(git current-branch)}"
	worktree-bases = "!git worktree list --porcelain | grep '^worktree' | sed 's/^worktree //' | xargs -IX basename X"
	current-branch = symbolic-ref --short HEAD
	current-remote = !git config "branch.$(git current-branch).remote"
	base-branch = !git config "branch.$(git current-branch).base"
	base-remote = !git config "branch.$(git base-branch).remote"
	base-full = !echo "$(git base-remote)/$(git base-branch)"
	features = "!f() { \
		git branch | \
			cut -c3- | \
			while read b; \
				do echo \"$(git config \"branch.${b}.base\") -> ${b}\"; \
			done | \
			grep -v '^ -> ' | \
			grep \"^${1:-$(git current-branch)} ->\" | \
			sort; \
	}; f"
	chx = update-index --chmod=+x
	grev = !git push origin HEAD:refs/for/master/$(git current-branch)
	grevb = !git push origin HEAD:refs/for/$(git current-branch)
	grevm = push origin HEAD:refs/for/master
	prefix-branch = "!f() { \
		git branch --move \"${1:?Input prefix}-$(git current-branch)\"; \
	}; f"
	remote-fork = "!f() { \
		git remote rename origin upstream && \
		git remote add origin \"$(git config remote.upstream.url | sed 's;^\\(git@\\|https://\\)github\\.com[/:][^/]\\+/;git@github.com:thinca/;')\" && \
		git fetch origin; \
	}; f"
	gh-repo = "!git remote get-url origin | sed 's/.*:\\(.*\\?\\)\\(\\.git\\)\\?/\\1/'"
	# XXX: `open` is only available on MacOS
	mkpr = "!open https://github.com/$(git gh-repo)/compare/$(git base-branch)...$(git current-branch)?expand=1"
[pretty]
	gene = format:%C(yellow)%h%Creset %ad %an: %s%C(yellow)%d%Creset
	genegr = format:%h %ad %an: %s%d
	recent = format:%C(yellow)%h%Creset %ad %an: %s
[rerere]
	enabled = true
[include]
	path = ~/.gitconfig.local
	path = config.local

# vim: ft=gitconfig
